import numpy as np
from random import sample, uniform
from operator import add

data = [[0, 94, 76, 141, 91, 60, 120, 145, 91, 74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24], [94, 76, 141, 91, 60, 120, 145, 91, 74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94], [76, 141, 91, 60, 120, 145, 91, 74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0], [141, 91, 60, 120, 145, 91, 74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156], [91, 60, 120, 145, 91, 74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231], [60, 120, 145, 91, 74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64], [120, 145, 91, 74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93], [145, 91, 74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108], [91, 74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68], [74, 90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37], [90, 55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150], [55, 145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130], [145, 108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130, 57], [108, 41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130, 57, 233], [41, 49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130, 57, 233, 26], [49, 33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130, 57, 233, 26, 62], [33, 151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130, 57, 233, 26, 62, 140], [151, 69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130, 57, 233, 26, 62, 140, 61], [69, 111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130, 57, 233, 26, 62, 140, 61, 229], [111, 24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130, 57, 233, 26, 62, 140, 61, 229, 120], [24, 94, 0, 156, 231, 64, 93, 108, 68, 37, 150, 130, 57, 233, 26, 62, 140, 61, 229, 120, 57]]
populationSize = 5
generations = 10
pointsize = len(data[0])-1
parentPool = 2

#init
tours = []
for i in range(populationSize):
    tours.append(sample(list(range(1,pointsize+1)), pointsize))
"""
print(tours)
print(len(tours[0]))
"""

def eval_fitness():
    distances = []
    for x in tours:
        tourdis = [list(map(int, [0] + x)), list(map(int, x + [0]))]
        distance = sum([data[tourdis[0][i]][tourdis[1][i]] for i in range(pointsize)])
        distances.append(1/distance)
    return distances

def roulette():
    maxdis = sum(fitness for fitness in modF)
    pick = uniform(0, maxdis)
    current = 0
    for fitness in modF:
        current += fitness
        if current > pick:
            return modF.index(fitness)

    pass

#mainloop
for i in range(generations):
    #evaluation
    fitness = []

    #determine fitness of tour
    modF = eval_fitness()

    #termination condition irrelevant due to capped generations

    for i in range(parentPool):
        roulette()


